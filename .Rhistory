find_day_month_and_year = function(random_day){
position = min(which(random_day<=cumsum_days)) # This is useful to find the year corresponding to a day starting from January 1, 2001
all_years = seq(2017,2019,1)
year_of_the_day = all_years[position]
if(random_day <= 365){
(day = random_day)
month = min(which(day<=cumsum_month))
} else{
(day = random_day - cumsum_days[position - 1])
month = min(which(day<=cumsum_month))
}
day_month_and_year = list(day=day, month=month, year = year_of_the_day)
return(day_month_and_year)
}
month_no_leap_year = c(seq(1, 31), seq(1, 28), seq(1, 31), seq(1,30), seq(1,31), seq(1,30), seq(1,31), seq(1,30),seq(1,31), seq(1, 31), seq(1,30), seq(1,31))
# length(month_no_leap_year)
month_leap_year = c(seq(1, 31), seq(1, 29), seq(1, 31), seq(1,30), seq(1,31), seq(1,30), seq(1,31), seq(1,30),seq(1,31), seq(1, 31), seq(1,30), seq(1,31))
# length(month_leap_year)
find_day_month_and_year(366)
read_met_data_climatology = function(day, area, year_p){
if(area == 1){
district = "srimangal"
}else{
district = "khulna"
}
all_data = read.csv(paste0("min_max_air_", district, ".csv"))
all_data = all_data[all_data$doy == day & all_data$year == year_p, ]
return(all_data)
}
calculate_diurnal_air_temperature_historical = function(i, area, year_p){
# Read the air temperature data
temp_historical = read_met_data_climatology(i, area, year_p)
tmax_air = temp_historical$max_air_temp
tmin_air = temp_historical$min_air_temp
# 3 hourly time
hours = seq(0,21,3)
temp_at_different_times = sapply(hours, function(hour){((tmax_air + tmin_air)/2 + (tmax_air - tmin_air)*0.4484 *(sin(2*(pi/24)*(hour + 6) - 2.7489) + 0.2706 * sin(2 * (2 * (pi/24)* (hour + 6) - 2.7489)))) + 273.15})
area = rep(areas[area], 8)
year = rep(year_p, 8)
if((i != 365 & i != 366) | (year_p %%4 == 0 & i == 365)){
# If the day is not the last day of the year, the day of the year for temperature at 0 and 3 AM will be the immediate next day in the given year
temp_for_a_single_day = data.frame(time = c(6,9,12,15,18,21,0,3), day = c(i,i,i,i,i,i,i+1,i+1), area = area, year = year_p, air_temp = temp_at_different_times)
} else if((year_p%%4 != 0 & i == 365) | (year_p%%4 == 0 & i == 366)){
#  If the day is the last day of the year, the day of the year for temperature at 0 and 3 AM will be for the first day of the next year
temp_for_a_single_day = data.frame(time = c(6,9,12,15,18,21,0,3), day = c(i,i,i,i,i,i,1,1), area = area, year = c(rep(year_p, 6), year_p + 1, year_p + 1), air_temp = temp_at_different_times)
}
return(temp_for_a_single_day)
}
diurnal_air_temp = read.csv("diurnal_air_temp.csv")
diurnal_air_temp$time = factor(diurnal_air_temp$time)
diurnal_air_temp$day = factor(diurnal_air_temp$day)
diurnal_air_temp$area = factor(diurnal_air_temp$area)
read_met_data = function(i, area_no){
day_year = find_day_month_and_year(i)
day = day_year$day
year = day_year$year
# all_data = read.csv("long_data.csv")
all_data = read.csv("input_data_for_simulation_2017_2019.csv")
# all_data = all_data[all_data$doy == day & all_data$year == year, ]
all_data = all_data[all_data$day == day & all_data$year == year, ]
all_data = all_data[all_data$district == areas[area_no], ]
return(all_data)
}
# Let's load data for day 1
daily_data = read_met_data(1, 1)
str(daily_data)
get_day_length = function(place, day_arg){
# Get the latitude for the place
lat = latitude[place]
# Compute the sunrise and sunset time using functions from solrad package
# This will give us the day length which we can then use for computing
# solar irradiance for 3 hours computing from solar irradiance for a day as
# provided in the NASA LARC dataset
# sunrise = Sunrise(day, lat)
sunset = Sunset(day_arg, lat)
# Compute the day length
# Sunrise() gives back the time when the sun rises in AM
# Sunset() gives the sunset time in PM.
# So, to compute the day_length, we subtract sunrise from 12 and add the sunset time in PM
# to get the day_length
# day_length = (12 - sunrise) + sunset
day_length = DayLength(day_arg, lat)
sunrise = 12 + sunset - day_length
# Make a list comprising of sunrise, sunset and day_length and return this
solar_list = list("sunrise" = sunrise, "sunset" = sunset, "day_length" = day_length)
return(solar_list)
}
get_day_length(1, 1)
# This function calculates phi_s or measured incident radiation
calculate_phi_s = function(i, time, place, day_arg){
solar_data = get_day_length(place, day_arg)
daily_data_f = read_met_data(i, place)
# solar_daily = daily_data_f$insolation
# Calculate hourly solar data
#hourly_solar = solar_daily[place] / solar_data[["day_length"]]
# sol_irradiance = str_pad
# check if the time is before sunrise or if the time is after sunset
# if(((time_of_the_day[time] + 3) < solar_data[["sunrise"]]) | ((time_of_the_day[time]) > solar_data[["sunset"]] + 12)){
#   # if the 3-hour time is before sunrise or after sunset, solar irradiance is 0
#   sol_irradiance = 0
# } else if((time_of_the_day[time] < solar_data[["sunrise"]]) & ((time_of_the_day[time] + 3) > solar_data[["sunrise"]])){
#   # check if the time starts before sunrise and there are some time in the 3-hourly periods that fall before sunrise or in the morning
#
#     # Calculate the total duration of the 3-hours after the sunrise
#     sunshine_duration = time_of_the_day[time] + 3 - solar_data[["sunrise"]]
#     sol_irradiance = sunshine_duration * hourly_solar
#   } else if((time_of_the_day[time] > solar_data[["sunrise"]]) & (time_of_the_day[time] < solar_data[["sunset"]] + 12) & ((time_of_the_day[time] + 3) > solar_data[["sunset"]] + 12)){
#     # check if the time starts before sunset and there are some time in the 3-hourly periods that fall after sunset or in the evening
#
#     # Calculate the total duration of the 3-hours before the sunset
#     sunshine_duration = 12 + solar_data[["sunset"]] - time_of_the_day[time]
#     # e.g., if sunset is at 7 PM, 12 + solar_data[["sunset"]] gives us 19
#     # if the time of the day is 18 or 6 PM, the above equation stands as 12 + 7 - 6 = 1
#     # Thus, it gives 1 hour of sunshine
#     sol_irradiance = sunshine_duration * hourly_solar
#   } else if(((time_of_the_day[time]) >= solar_data[["sunrise"]]) & ((time_of_the_day[time] + 3) <= solar_data[["sunset"]] + 12)){
#     # Check if all the 3-hours are between sunshine and sunset
#
#     sunshine_duration = 3
#     sol_irradiance = sunshine_duration * hourly_solar
#   }
sol_irradiance = daily_data_f[, 8+time]
# return solar irradiance
return(sol_irradiance)
}
calculate_phi_s(1, 6, 1, 1)
radiation_column_names = colnames(read_met_data(1, 1))[-c(1,2,3,4,5,6,7,8,9)]
# This function calculates phi_sn or penetrating short-wave solar radiation
calculate_phi_sn = function(i, day_arg, three_hour, place){
daily_data = read_met_data(i, place)
solar_daily = daily_data$insolation
wind_speed_2m = daily_data$wind_speed_2m
# Calculate solar altitude angle lambda
# lambda = abs(Altitude(day_arg, latitude[place], longitude[place], longitude[place], 0))
lambda = lambda_s[three_hour]
# Calculate R_s
# R_s = 2.2 * (180 * lambda/pi)^(-0.97)
R_s = 2.2 * (lambda)^(-0.97)
# W_z is wind velocity at 2 meters above the pond surface
W_z = wind_speed_2m * 3.6
# Calculate R, reflectivity adjusted for surface temperature
R = R_s * (1 - 0.08 * W_z)
# Calculate phi_s
# phi_s = calculate_phi_s(i, three_hour, place, day_arg) # calculate_phi_s(i, time, place, day_arg)
phi_s = daily_data[[radiation_column_names[three_hour]]]
# Calculate phi_sn = phi_s * (1 - R)
phi_sn = phi_s * (1 - R)
# phi_sn for three hours
# three_hours_phi_sn = phi_sn * 3
three_hours_phi_sn = phi_sn
# return the value of phi_sn
return(three_hours_phi_sn)
}
calculate_phi_sn(2, 2, 4, 2)
calculate_phi_at = function(three_hour, place, cloud_fraction, day_arg, year_arg){
# Get the time in hour
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
t_ak = air_temp$air_temp # Already in Kelvin
# t_ak = ((tmax_air + tmin_air)/2 + (tmax_air - tmin_air)*0.4484 *(sin(2*(pi/24)*(hour + 6) - 2.7489) + 0.2706 * sin(2 * (2 * (pi/24)* (hour + 6) - 2.7489)))) + 273.15
e = (0.398 * (10 ** (-5)))*(t_ak ** (2.148))
r = 0.03 # reflectance of the water surface to longwave radiation
sigma = 2.07 * (10 ** (-7)) # Stefan-Boltzman constant, unit Kg/m2/hr/K^4
phi_at = ((1 - r)* e * sigma * (t_ak ** (4))) * (1 + 0.17 * (cloud_fraction ** 2)) # this calculates phi_at for one hour
# phi_at for three hours
# three_hours_phi_at = phi_at * 3
three_hours_phi_at = phi_at
return(three_hours_phi_at)
}
calculate_phi_at(6, 2, 0.3, 2, 2017)
calculate_phi_ws = function(place, three_hour, layer_no, day_arg, year_arg){
# T_wk is the water surface temperature in Kelvin
# The following file heat_layers.csv contains the output of the simulation
heat_layers = read.csv("simulated_data.csv")
heat_layers = heat_layers[heat_layers$layer == layer_no, ]
heat_layers = heat_layers[heat_layers$area == areas[place], ]
if(three_hour!=1){
heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
} else{
heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
}
print(paste0("Inside calculate_phi_ws(), the value of day is: ", day_arg))
heat_layers = heat_layers[heat_layers$day == day_arg, ]
heat_layers =  heat_layers[heat_layers$year == year_arg, ]
T_wk = heat_layers$temp + 273.15
# T_wk = heat_layers$temp
# Calculate hourly phi_ws
phi_ws = 0.97 * sigma_const * (T_wk^4)
# Now, calculate three-hourly phi_ws
three_hours_phi_ws = phi_ws # * 3
# Return phi_ws for three hours or three_hours_phi_ws
return(three_hours_phi_ws)
}
calculate_phi_ws(2, 4, 1, 1, 2017)
calculate_phi_e = function(i, place, three_hour, layer_no, day_arg, year_arg){
# N, empirical coefficient from Lake Hefner, unit KJm-2km-1mmHg-1
N = 5.0593
daily_data = read_met_data(i, place)
# solar_daily = daily_data$insolation
wind_speed_2m = daily_data$wind_speed_2m
# wind speed 2 m above the surface
W2 = wind_speed_2m * 3.6
# T_wc is water surface temperature in Celsius
# The following file heat_layers.csv contains the output of the simulation
heat_layers = read.csv("simulated_data.csv")
heat_layers = heat_layers[heat_layers$layer == layer_no, ]
heat_layers = heat_layers[heat_layers$area == areas[place], ]
if(three_hour!=1){
heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
} else{
heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
}
heat_layers = heat_layers[heat_layers$day == day_arg, ]
heat_layers =  heat_layers[heat_layers$year == year_arg, ]
T_wc = heat_layers$temp
tmin_air_data = daily_data[daily_data$district == areas[place], ]
tmin_air = tmin_air_data$min_temp
# T_d is the average daily dew-point temperature
# Using morning minimum temperature as the morning minimum dry-bulb temperature
T_d = (tmin_air - 2) + 273.15 # from page 235 of the Culberson paper. Adding 273.15 to convert to Kelvin
# e_s, saturated vapor pressure at T_wc; unit mmHg
# e_s = 25.375 * exp(17.62 - (5271 / T_wc))
# e_s calculated in different way
hour = time_of_the_day[three_hour]
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
t_ak = air_temp$air_temp # Already in Kelvin
t_ac = t_ak - 273.15
e_s = 0.622 * exp((17.27*t_ac)/(t_ac + 237.3))
# e_a, water vapor pressure above the pond surface; unit mmHg
# e_a = 610.78 * exp(17.2694 *((T_d - 273.16)/(T_d - 35.86)))
# e_a calculated in different way
rh = 0.8
e_a = e_s * (1-rh)
phi_e = N * W2 * (e_s - e_a)
# three_hours_phi_e = 3 * phi_e
three_hours_phi_e = phi_e
# Return phi_e for three hours or three_hours_phi_e
return(three_hours_phi_e)
}
calculate_phi_e(1, 2, 4, 1, 1, 2017) # (i, place, three_hour, layer_no, day_arg, year_arg)
daily_data =read_met_data(1, 2)
daily_data
# T_wc is water surface temperature in Celsius
# heat_layers = read.csv("simulated_data.csv")
heat_layers = read.csv("simulation_output_Feb_2021.csv")
calculate_phi_c = function(T_wc, i, place, three_hour, layer_no, day_arg, year_arg){
# wind speed 2 m above the surface
daily_data =read_met_data(i, place)
wind_speed_2m = daily_data$wind_speed_2m
# wind_speed_2m = daily_data$WS2M
W2 = wind_speed_2m * 3.6 # Convert ms-1 to Kmhr-1
# Get the time in hour
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
# Air temperature in degree Celsius
T_ac = air_temp$air_temp - 273.15
# phi_c, sensible heat transfer
phi_c = 1.5701 * W2 * (T_wc - T_ac)
three_hours_phi_c = phi_c
# Return phi_c for three hours or three_hours_phi_c
return(three_hours_phi_c)
}
calculate_phi_c = function(T_wc, i, place, three_hour, layer_no, day_arg, year_arg){
# wind speed 2 m above the surface
daily_data =read_met_data(i, place)
wind_speed_2m = daily_data$wind_speed_2m
# wind_speed_2m = daily_data$WS2M
W2 = wind_speed_2m * 3.6 # Convert ms-1 to Kmhr-1
# Get the time in hour
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
# Air temperature in degree Celsius
T_ac = air_temp$air_temp - 273.15
# phi_c, sensible heat transfer
phi_c = 1.5701 * W2 * (T_wc - T_ac)
three_hours_phi_c = phi_c
# Return phi_c for three hours or three_hours_phi_c
return(three_hours_phi_c)
}
calculate_phi_c(25, 1, 2, 4, 1, 1, 2017) # (i, place, three_hour, layer_no, day_arg, year_arg)
T_wc=17
i=1
place=2
three_hour=4
layer_no=1
day_arg=1
year_arg=2017
daily_data =read_met_data(i, place)
wind_speed_2m = daily_data$wind_speed_2m
# wind_speed_2m = daily_data$WS2M
W2 = wind_speed_2m * 3.6 # Convert ms-1 to Kmhr-1
W2
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
# Air temperature in degree Celsius
T_ac = air_temp$air_temp - 273.15
T_ac
T_wc=20
# wind speed 2 m above the surface
daily_data =read_met_data(i, place)
wind_speed_2m = daily_data$wind_speed_2m
# wind_speed_2m = daily_data$WS2M
W2 = wind_speed_2m * 3.6 # Convert ms-1 to Kmhr-1
# Get the time in hour
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
# Air temperature in degree Celsius
T_ac = air_temp$air_temp - 273.15
# phi_c, sensible heat transfer
phi_c = 1.5701 * W2 * (T_wc - T_ac)
three_hours_phi_c = phi_c
three_hours_phi_c
T_ac
T_wc
T_wc=16
daily_data =read_met_data(i, place)
wind_speed_2m = daily_data$wind_speed_2m
# wind_speed_2m = daily_data$WS2M
W2 = wind_speed_2m * 3.6 # Convert ms-1 to Kmhr-1
# Get the time in hour
hour = time_of_the_day[three_hour]
# load the diurnal air temperature data
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
# Air temperature in degree Celsius
T_ac = air_temp$air_temp - 273.15
# phi_c, sensible heat transfer
phi_c = 1.5701 * W2 * (T_wc - T_ac)
three_hours_phi_c = phi_c
three_hours_phi_c
find_day_month_and_year()
find_day_month_and_year(1)
find_day_month_and_year(366)
i=1
place=2
three_hour=3
cloud_fraction=0.2
layer_np=1
layer_no=1
day_year = find_day_month_and_year(i)
day_f = day_year$day
year_f = day_year$year
phi_sn = calculate_phi_sn(i, day_f, three_hour, place)
print("phi_sn done")
print(phi_sn)
phi_at = calculate_phi_at(three_hour, place, cloud_fraction, day_f, year_f)
print("phi_at done")
print(phi_at)
phi_ws = calculate_phi_ws(place, three_hour, 1, day_f, year_f)
print("phi_ws done")
print(phi_ws)
phi_e =  calculate_phi_e(i, place, three_hour, 1, day_f, year_f)
print("phi_e done")
print(phi_e)
calculate_phi_ws = function(place, three_hour, layer_no, day_arg, year_arg){
# T_wk is the water surface temperature in Kelvin
# The following file heat_layers.csv contains the output of the simulation
heat_layers = read.csv("simulated_data.csv")
heat_layers = heat_layers[heat_layers$layer == layer_no, ]
heat_layers = heat_layers[heat_layers$area == areas[place], ]
if(three_hour!=1){
heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
} else{
heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
}
print(paste0("Inside calculate_phi_ws(), the value of day is: ", day_arg))
heat_layers = heat_layers[heat_layers$day == day_arg, ]
heat_layers =  heat_layers[heat_layers$year == year_arg, ]
T_wk = heat_layers$temp + 273.15
# T_wk = heat_layers$temp
# Calculate hourly phi_ws
phi_ws = 0.97 * sigma_const * (T_wk^4)
# Now, calculate three-hourly phi_ws
three_hours_phi_ws = phi_ws # * 3
# Return phi_ws for three hours or three_hours_phi_ws
return(three_hours_phi_ws)
}
calculate_phi_ws(2, 3, 1, 1, 2017)
calculate_phi_ws = function(T_wc, place, three_hour, layer_no, day_arg, year_arg){
# T_wk is the water surface temperature in Kelvin
# The following file heat_layers.csv contains the output of the simulation
# heat_layers = read.csv("simulated_data.csv")
#
# heat_layers = heat_layers[heat_layers$layer == layer_no, ]
# heat_layers = heat_layers[heat_layers$area == areas[place], ]
# if(three_hour!=1){
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
# } else{
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
# }
# print(paste0("Inside calculate_phi_ws(), the value of day is: ", day_arg))
# heat_layers = heat_layers[heat_layers$day == day_arg, ]
# heat_layers =  heat_layers[heat_layers$year == year_arg, ]
T_wk = T_wc + 273.15
# T_wk = heat_layers$temp
# Calculate hourly phi_ws
phi_ws = 0.97 * sigma_const * (T_wk^4)
# Now, calculate three-hourly phi_ws
three_hours_phi_ws = phi_ws # * 3
# Return phi_ws for three hours or three_hours_phi_ws
return(three_hours_phi_ws)
}
calculate_phi_ws(20, 2, 3, 1, 1, 2017)
calculate_phi_e = function(i, place, three_hour, layer_no, day_arg, year_arg){
# N, empirical coefficient from Lake Hefner, unit KJm-2km-1mmHg-1
N = 5.0593
daily_data = read_met_data(i, place)
# solar_daily = daily_data$insolation
wind_speed_2m = daily_data$wind_speed_2m
# wind speed 2 m above the surface
W2 = wind_speed_2m * 3.6
# T_wc is water surface temperature in Celsius
# The following file heat_layers.csv contains the output of the simulation
# heat_layers = read.csv("simulated_data.csv")
#
# heat_layers = heat_layers[heat_layers$layer == layer_no, ]
# heat_layers = heat_layers[heat_layers$area == areas[place], ]
# if(three_hour!=1){
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
# } else{
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
# }
# heat_layers = heat_layers[heat_layers$day == day_arg, ]
# heat_layers =  heat_layers[heat_layers$year == year_arg, ]
# T_wc = heat_layers$temp
tmin_air_data = daily_data[daily_data$district == areas[place], ]
tmin_air = tmin_air_data$min_temp
# T_d is the average daily dew-point temperature
# Using morning minimum temperature as the morning minimum dry-bulb temperature
T_d = (tmin_air - 2) + 273.15 # from page 235 of the Culberson paper. Adding 273.15 to convert to Kelvin
# e_s, saturated vapor pressure at T_wc; unit mmHg
# e_s = 25.375 * exp(17.62 - (5271 / T_wc))
# e_s calculated in different way
hour = time_of_the_day[three_hour]
air_temp = read.csv("diurnal_air_temp.csv")
air_temp = air_temp[air_temp$time == hour, ]
air_temp = air_temp[air_temp$day == day_arg, ]
air_temp = air_temp[air_temp$year == year_arg, ]
air_temp = air_temp[air_temp$area == areas[place], ]
t_ak = air_temp$air_temp # Already in Kelvin
t_ac = t_ak - 273.15
e_s = 0.622 * exp((17.27*t_ac)/(t_ac + 237.3))
# e_a, water vapor pressure above the pond surface; unit mmHg
# e_a = 610.78 * exp(17.2694 *((T_d - 273.16)/(T_d - 35.86)))
# e_a calculated in different way
rh = 0.8
e_a = e_s * (1-rh)
phi_e = N * W2 * (e_s - e_a)
# three_hours_phi_e = 3 * phi_e
three_hours_phi_e = phi_e
# Return phi_e for three hours or three_hours_phi_e
return(three_hours_phi_e)
}
calculate_phi_e(1, 2, 4, 1, 1, 2017) # (i, place, three_hour, layer_no, day_arg, year_arg)
calculate_phi_e(1, 2, 3, 1, 1, 2017) # (i, place, three_hour, layer_no, day_arg, year_arg)
calculate_phi_ws = function(T_wc, place, three_hour, layer_no, day_arg, year_arg){
# T_wk is the water surface temperature in Kelvin
# The following file heat_layers.csv contains the output of the simulation
# heat_layers = read.csv("simulated_data.csv")
#
# heat_layers = heat_layers[heat_layers$layer == layer_no, ]
# heat_layers = heat_layers[heat_layers$area == areas[place], ]
# if(three_hour!=1){
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[three_hour-1], ] # Get the heat content computed for the last three-hour time period
# } else{
#   heat_layers = heat_layers[heat_layers$time == time_of_the_day[8], ] # Get the heat content computed for the last three-hour time period
# }
# print(paste0("Inside calculate_phi_ws(), the value of day is: ", day_arg))
# heat_layers = heat_layers[heat_layers$day == day_arg, ]
# heat_layers =  heat_layers[heat_layers$year == year_arg, ]
T_wk = T_wc + 273.15
# T_wk = heat_layers$temp
# Calculate hourly phi_ws
phi_ws = 0.97 * sigma_const * (T_wk^4)
# Now, calculate three-hourly phi_ws
three_hours_phi_ws = phi_ws # * 3
# Return phi_ws for three hours or three_hours_phi_ws
return(three_hours_phi_ws)
}
calculate_phi_ws(20, 2, 3, 1, 1, 2017)
